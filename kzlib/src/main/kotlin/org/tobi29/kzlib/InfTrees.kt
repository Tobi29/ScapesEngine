/*
 * KZLib - Kotlin port of ZLib
 *
 * Copyright of original source:
 *
 * Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 * Jean-loup Gailly        Mark Adler
 * jloup@gzip.org          madler@alumni.caltech.edu
 *
 *
 * The data format used by the zlib library is described by RFCs (Request for
 * Comments) 1950 to 1952 in the files http://tools.ietf.org/html/rfc1950
 * (zlib format), rfc1951 (deflate format) and rfc1952 (gzip format).
 */

package org.tobi29.kzlib

import org.tobi29.stdex.assert

private inline val MAXBITS get() = MAX_BITS

/*
   Build a set of tables to decode the provided canonical Huffman code.
   The code lengths are lens[0..codes-1].  The result starts at *table,
   whose indices are 0..2^bits-1.  work is a writable array of at least
   lens shorts, which is used as a work area.  type is the type of code
   to be generated, CODES, LENS, or DISTS.  On return, zero is success,
   -1 is an invalid code, and +1 means that ENOUGH isn't enough.  table
   on return points to the next available entry's address.  bits is the
   requested root table index bits, and on return it is the actual root
   table index bits.  It will differ if the request is greater than the
   longest code or if it is less than the shortest code.
 */
internal fun inflate_table(
    type: codetype,
    lens: ShortArray,
    lens_i: UInt,
    codes: UInt,
    table: ShortArray,
    table_i_ref: IntArray,
    bits: IntArray,
    work: ShortArray
): Int {
    val count = ShortArray(MAXBITS + 1) /* number of codes of each length */
    val offs = ShortArray(MAXBITS + 1) /* offsets in table for each length */
    var table_i = table_i_ref[0]

    /*
       Process a set of code lengths to create a canonical Huffman code.  The
       code lengths are lens[0..codes-1].  Each length corresponds to the
       symbols 0..codes-1.  The Huffman code is generated by first sorting the
       symbols by length from short to long, and retaining the symbol order
       for codes with equal lengths.  Then the code starts with all zero bits
       for the first code of the shortest length, and the codes are integer
       increments for the same length, and zeros are appended as the length
       increases.  For the deflate format, these bits are stored backwards
       from their more natural integer increment ordering, and so when the
       decoding tables are built in the large loop below, the integer codes
       are incremented backwards.
       This routine assumes, but does not check, that all of the entries in
       lens[] are in the range 0..MAXBITS.  The caller must assure this.
       1..MAXBITS is interpreted as that code length.  zero means that that
       symbol does not occur in this code.
       The codes are sorted by computing a count of codes for each length,
       creating from that a table of starting indices for each length in the
       sorted table, and then entering the symbols in order in the sorted
       table.  The sorted table is work[], with that space being provided by
       the caller.
       The length counts are used for other purposes as well, i.e. finding
       the minimum and maximum length codes, determining if there are any
       codes at all, checking for a valid set of lengths, and looking ahead
       at length counts to determine sub-table sizes when building the
       decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len in 0..MAXBITS) count[len] = 0
    for (sym in 0 until codes) count[lens[lens_i + sym].toUInt()]++

    /* bound code lengths, force root to be within code lengths */
    var root = bits[0] /* number of index bits for root table */
    var max = MAXBITS /* maximum code length */
    while (max >= 1 && count[max] == 0.toShort()) max--
    if (root > max) root = max
    /* table entry for duplication */
    var here_op: Byte = 0
    var here_bits: Byte = 0
    var here_val: Short = 0
    if (max == 0) {                     /* no symbols to code at all */
        here_op = 64 /* invalid code marker */
        here_bits = 1
        here_val = 0
        /* make a table to force an error */
        table[op_bits(table_i)] = op_bits(here_op, here_bits)
        table[`val`(table_i)] = here_val
        table_i++
        table[op_bits(table_i)] = op_bits(here_op, here_bits)
        table[`val`(table_i)] = here_val
        bits[0] = 1
        return 0 /* no symbols, but wait for decoding to report error */
    }
    var min = 1 /* minimum code length */
    while (min <= max && count[min] == 0.toShort()) min++
    if (root < min) root = min

    /* check for an over-subscribed or incomplete set of lengths */
    var left = 1 /* number of prefix codes available */
    for (len in 1..MAXBITS) {
        left = left shl 1
        left -= count[len]
        if (left < 0) return -1 /* over-subscribed */
    }
    if (left > 0 && (type == codetype.CODES || max != 1))
        return -1 /* incomplete set */

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0
    for (len in 1 until MAXBITS)
        offs[len + 1] = (offs[len] + count[len]).toShort()

    /* sort symbols by length, by symbol order within each length */
    for (sym in 0 until codes) {
        val i = lens[lens_i + sym].toUInt()
        if (i != 0) {
            val t = offs[i].toUInt()
            offs[i]++
            work[t] = sym.toShort()
        }
    }

    /*
       Create and fill in decoding tables.  In this loop, the table being
       filled is at next and has curr index bits.  The code being used is huff
       with length len.  That code is converted to an index by dropping drop
       bits off of the bottom.  For codes where len is less than drop + curr,
       those top drop + curr - len bits are incremented through all values to
       fill the table with replicated entries.
       root is the number of index bits for the root table.  When len exceeds
       root, sub-tables are created pointed to by the root entry with an index
       of the low root bits of huff.  This is saved in low to check for when a
       new sub-table should be started.  drop is zero when the root table is
       being filled, and drop is root when sub-tables are being filled.
       When a new sub-table is needed, it is necessary to look ahead in the
       code lengths to determine what size sub-table is needed.  The length
       counts are used for this, and so count[] is decremented as codes are
       entered in the tables.
       used keeps track of how many table entries have been allocated from the
       provided *table space.  It is checked for LENS and DIST tables against
       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
       the initial root table size constants.  See the comments in inftrees.h
       for more information.
       sym increments through all symbols, and the loop terminates when
       all codes of length max, i.e. all codes, have been processed.  This
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
     */

    /* set up for code type */
    val base: ShortArray /* base value table to use */
    val extra: ShortArray /* extra bits table to use */
    val match: UInt /* use base and extra for symbol >= match */
    when (type) {
        codetype.CODES -> {
            base = work /* dummy value--not used */
            extra = work /* dummy value--not used */
            match = 20
        }
        codetype.LENS -> {
            base = lbase
            extra = lext
            match = 257
        }
        codetype.DISTS -> {
            base = dbase
            extra = dext
            match = 0
        }
    }

    /* initialize state for loop */
    var huff = 0 /* starting code */
    var sym = 0 /* starting code symbol */
    var len = min /* starting code length */
    var next = table_i /* current table to fill in */
    var curr = root /* current table index bits */
    var drop = 0 /* current bits to drop from code for index */
    var low: UInt = -1 /* trigger new sub-table when len > root */
    var used = 1 shl root /* use root table entries */
    val mask = used - 1 /* mask for comparing low */

    /* check available table space */
    if ((type == codetype.LENS && used > ENOUGH_LENS) ||
        (type == codetype.DISTS && used > ENOUGH_DISTS))
        return 1

    /* process all codes and make table entries */
    while (true) {
        /* create table entry */
        here_bits = (len - drop).toByte()
        if (work[sym] + 1 < match) {
            here_op = 0
            here_val = work[sym]
        } else if (work[sym] >= match) {
            here_op = extra[work[sym] - match].toByte()
            here_val = base[work[sym] - match]
        } else {
            here_op = 32 + 64 /* end of block */
            here_val = 0
        }

        /* replicate for those indices with low len bits equal to huff */
        var incr = 1 shl (len - drop)
        var fill = 1 shl curr
        min = fill                 /* save offset to next table */
        do {
            fill -= incr
            val i = next + (huff ushr drop) + fill
            table[op_bits(i)] = op_bits(here_op, here_bits)
            table[`val`(i)] = here_val
        } while (fill != 0)

        /* backwards increment the len-bit code huff */
        incr = 1 shl (len - 1)
        while (huff and incr != 0) incr = incr ushr 1
        if (incr != 0) {
            huff = huff and (incr - 1)
            huff += incr
        } else huff = 0

        /* go to next symbol, update count, len */
        sym++
        count[len]--
        if (count[len] == 0.toShort()) {
            if (len == max) break
            len = lens[lens_i + work[sym].toUInt()].toUInt()
        }

        /* create new sub-table if needed */
        if (len > root && (huff and mask) != low) {
            /* if first time, transition to sub-tables */
            if (drop == 0) drop = root

            /* increment past last table */
            next += min /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop
            left = 1 shl curr
            while (curr + drop < max) {
                left -= count[curr + drop]
                if (left <= 0) break
                curr++
                left = left shl 1
            }

            /* check for enough space */
            used += 1 shl curr
            if ((type == codetype.LENS && used > ENOUGH_LENS) ||
                (type == codetype.DISTS && used > ENOUGH_DISTS))
                return 1

            /* point entry in root table to sub-table */
            low = huff and mask
            val i = table_i + low
            table[op_bits(i)] = op_bits(curr.toByte(), root.toByte())
            table[`val`(i)] = (next - table_i).toShort()
        }
    }

    /* fill in remaining table entry if code is incomplete (guaranteed to have
       at most one remaining entry, since if the code is incomplete, the
       maximum code length that was allowed to get this far is one bit) */
    if (huff != 0) {
        here_op = 64 /* invalid code marker */
        here_bits = (len - drop).toByte()
        here_val = 0
        val i = next + huff
        table[op_bits(i)] = op_bits(here_op, here_bits)
        table[`val`(i)] = here_val
    }

    /* set return parameters */
    table_i_ref[0] = table_i + used
    bits[0] = root

    return 0
}

private val lbase = shortArrayOf( /* Length codes 257..285 base */
    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
)
private val lext = shortArrayOf( /* Length codes 257..285 extra */
    16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
    19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 77, 202
)
private val dbase = shortArrayOf( /* Distance codes 0..29 base */
    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
    8193, 12289, 16385, 24577, 0, 0
)
private val dext = shortArrayOf( /* Distance codes 0..29 extra */
    16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
    28, 28, 29, 29, 64, 64
)

internal inline val lenfix: UInt get() = 0
internal inline val distfix: UInt get() = 512
internal val fixed = ShortArray(2 * 544).also { fixed ->
    val lens = ShortArray(320)
    val work = ShortArray(288)

    /* literal/length table */
    var sym = 0
    while (sym < 144) lens[sym++] = 8
    while (sym < 256) lens[sym++] = 9
    while (sym < 280) lens[sym++] = 7
    while (sym < 288) lens[sym++] = 8
    val next = IntArray(1)
    // lenfix = next[0]
    assert { lenfix == next[0] }
    val bits = IntArray(1)
    bits[0] = 9
    inflate_table(
        codetype.LENS, lens, 0, 288, fixed, next, bits, work
    )

    /* distance table */
    sym = 0
    while (sym < 32) lens[sym++] = 5
    // distfix = next[0]
    assert { distfix == next[0] }
    bits[0] = 5
    inflate_table(
        codetype.DISTS, lens, 0, 32, fixed, next, bits, work
    )
}
