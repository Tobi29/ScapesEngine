/*
 * Copyright 2012-2017 Tobi29
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.stream.Collectors

apply from: "$rootDir/resources/scapesenginemodulekotlin.gradle"
apply plugin: "idea"

configurations {
    runtimeLinux32
    runtimeLinux64
    runtimeMacOSX
    runtimeWindows32
    runtimeWindows64
    runtimePlatform
    nativesLinux32
    nativesLinux64
    nativesMacOSX
    nativesWindows32
    nativesWindows64
    nativesPlatform

    String os = System.properties["os.name"].toLowerCase()
    String arch = System.properties["os.arch"]
    if (os.contains("linux")) {
        if (arch.contains("64")) {
            runtimePlatform.extendsFrom runtimeLinux64
            nativesPlatform.extendsFrom nativesLinux64
        } else {
            runtimePlatform.extendsFrom runtimeLinux32
            nativesPlatform.extendsFrom nativesLinux32
        }
    } else if (os.contains("mac")) {
        runtimePlatform.extendsFrom runtimeMacOSX
        nativesPlatform.extendsFrom nativesMacOSX
    } else if (os.contains("windows")) {
        if (arch.contains("64")) {
            runtimePlatform.extendsFrom runtimeWindows64
            nativesPlatform.extendsFrom nativesWindows64
        } else {
            runtimePlatform.extendsFrom runtimeWindows32
            nativesPlatform.extendsFrom nativesWindows32
        }
    }
}

afterEvaluate {
    sourceSets.main.runtimeClasspath += configurations.runtimePlatform

    idea {
        module {
            scopes.RUNTIME.plus += [configurations.runtimePlatform]
        }
    }
}

idea {
    module {
        excludeDirs += file("$rootDir/runtime")
    }
}

apply plugin: ScapesEngineApplication

class ScapesEngineApplication implements Plugin<Project> {
    @Override
    void apply(Project target) {
        // Application properties
        target.extensions.
                create("application", ScapesEngineApplicationExtension)

        // Natives task
        def nativesTask = target.tasks.create("natives", Copy)
        nativesTask.description = "Extract natives for runtime"
        nativesTask.group = "run"
        def natives = new File(target.buildDir, "natives")
        nativesTask.from({ ->
            target.configurations.nativesPlatform.files.stream().
                    map({
                        if (it.name.endsWith(".jar")) {
                            return target.zipTree(it).files.stream().filter({
                                it.isFile() && it.name.matches(
                                        "(.+)\\.(dll|so(.[0-9]+)?|jnilib|dylib)")
                            }).collect(Collectors.toList())
                        } else {
                            return it
                        }
                    }).collect(Collectors.toList())
        }) {
            eachFile { FileCopyDetails fcp ->
                String[] segments = [fcp.name]
                fcp.relativePath = new RelativePath(true, segments)
                fcp.setMode(0755)
            }
        }
        nativesTask.into natives

        // Run task
        def runTask = target.tasks.create("run", JavaExec)
        runTask.description = "Runs this project as a JVM application"
        runTask.group = "Run"
        runTask.conventionMapping.main = { target.application.mainClass }
        target.afterEvaluate {
            runTask.classpath = target.sourceSets.main.runtimeClasspath
        }
        runTask.jvmArgs "-Xms64M", "-Xmx2048M", "-XX:+UseG1GC",
                "-XX:MaxGCPauseMillis=1"
        if (target.rootProject.hasProperty("runArgs")) {
            runTask.args Eval.me(target.rootProject.runArgs)
        }
        if (target.rootProject.hasProperty("jvmArgs")) {
            runTask.jvmArgs Eval.me(target.rootProject.jvmArgs)
        }
        if (target.rootProject.hasProperty("runEnv")) {
            runTask.environment.putAll Eval.me(target.rootProject.runEnv)
        }
        if (System.properties["os.name"].toLowerCase().contains("mac")) {
            runTask.jvmArgs "-XstartOnFirstThread"
        }
        if (target.rootProject.hasProperty("runtime")) {
            runTask.jvmArgs "-Duser.dir=$target.rootProject.runtime"
        } else {
            runTask.jvmArgs "-Duser.dir=${target.file('runtime')}"
        }
        runTask.jvmArgs "-Djava.library.path=$natives.absolutePath"
        runTask.standardInput = System.in
        runTask.dependsOn target.classes
        runTask.dependsOn nativesTask

        // Full deploy task
        def deployTask = target.tasks.create("deploy", Task)
        deployTask.group = "Deployment"
    }
}
