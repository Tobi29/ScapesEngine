/*
 * Copyright 2012-2016 Tobi29
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.stream.Collectors

apply from: "$rootDir/ScapesEngine/resources/scapesenginemodulekotlin.gradle"
apply plugin: "idea"

configurations {
    runtimeLinux32
    runtimeLinux64
    runtimeMacOSX
    runtimeWindows32
    runtimeWindows64
    runtimePlatform
    nativesLinux32
    nativesLinux64
    nativesMacOSX
    nativesWindows32
    nativesWindows64
    nativesPlatform

    String os = System.properties["os.name"].toLowerCase()
    String arch = System.properties["os.arch"]
    if (os.contains("linux")) {
        if (arch.contains("64")) {
            runtimePlatform.extendsFrom runtimeLinux64
            nativesPlatform.extendsFrom nativesLinux64
        } else {
            runtimePlatform.extendsFrom runtimeLinux32
            nativesPlatform.extendsFrom nativesLinux32
        }
    } else if (os.contains("mac")) {
        runtimePlatform.extendsFrom runtimeMacOSX
        nativesPlatform.extendsFrom nativesMacOSX
    } else if (os.contains("windows")) {
        if (arch.contains("64")) {
            runtimePlatform.extendsFrom runtimeWindows64
            nativesPlatform.extendsFrom nativesWindows64
        } else {
            runtimePlatform.extendsFrom runtimeWindows32
            nativesPlatform.extendsFrom nativesWindows32
        }
    }
}

afterEvaluate {
    sourceSets.main.runtimeClasspath += configurations.runtimePlatform

    idea {
        module {
            scopes.RUNTIME.plus += [configurations.runtimePlatform]
        }
    }
}

apply plugin: ScapesEngineApplication

class ScapesEngineApplication implements Plugin<Project> {
    @Override
    void apply(Project target) {
        // Extension properties
        target.extensions.
                create("extension", ScapesEngineExtensionExtension)

        // Platform deploy tasks
        def deployLinux32Task = addDeployLinuxTask(target, "32",
                target.configurations.runtimeLinux32,
                target.configurations.nativesLinux32)
        def deployLinux64Task = addDeployLinuxTask(target, "64",
                target.configurations.runtimeLinux64,
                target.configurations.nativesLinux64)

        // Full deploy task
        def deployTask = target.tasks.create("deploy", Task)
        deployTask.group = "Deployment"
        if (deployLinux32Task != null) {
            deployTask.dependsOn deployLinux32Task
        }
        if (deployLinux64Task != null) {
            deployTask.dependsOn deployLinux64Task
        }
    }

    private Task addDeployLinuxTask(Project target, String arch,
            Configuration runtime, Configuration natives) {
        def name = "${-> target.project.name.toLowerCase()}"
        def libPath = "/usr/share/java"
        if (target.rootProject.hasProperty("libPath")) {
            libPath = target.rootProject.libPath
        }

        // Main task
        def task = target.tasks.create("deployLinux$arch", Tar)
        task.description =
                "Contains tarball that can be extracted into root for easier package creation"
        task.group = "Deployment"
        task.dependsOn target.jar
        task.baseName = "${-> target.project.name}-Linux$arch"
        task.compression = Compression.GZIP
        task.from({ ->
            (target.configurations.runtime + runtime +
                    target.files(target.jar)) -
                    target.files(target.extension.parent.tasks.jar) -
                    target.extension.parent.configurations.runtime
        }, { into "$libPath/${-> target.extension.parent.name.toLowerCase()}" })
        task.from({ ->
            natives.files.stream().
                    map({
                        if (it.name.endsWith(".jar")) {
                            target.zipTree(it).files.stream().filter({
                                it.isFile() &&
                                        it.name.matches("(.+)\\.so(.[0-9]+)?")
                            }).collect(Collectors.toList())
                        } else {
                            return it
                        }
                    }).collect(Collectors.toList())
        }) {
            eachFile { FileCopyDetails fcp ->
                String[] segments = [libPath, name, fcp.name]
                fcp.relativePath = new RelativePath(true, segments)
            }
        }
        return task
    }
}

class ScapesEngineExtensionExtension {
    def Project parent
}
