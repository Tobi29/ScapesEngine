uniform 0 Matrix4 uniform_ModelViewMatrix;
uniform 1 Matrix4 uniform_ModelViewProjectionMatrix;
uniform 3 Texture2 uniform_Texture;
uniform 4 Vector3 uniform_FogColor;
uniform 5 Float uniform_FogEnd;

shader vertex(0 Vector4 attribute_Position,
              1 Vector4 attribute_Color,
              2 Vector2 attribute_Texture) {
    varying_Texture = attribute_Texture;
    varying_Color = attribute_Color;
    varying_Depth = length((uniform_ModelViewMatrix * attribute_Position).xyz);
    out_Position = uniform_ModelViewProjectionMatrix * attribute_Position;
}

shader fragment(Vector4 varying_Color,
                Vector2 varying_Texture,
                Float varying_Depth) {
    Vector4 color = texture(uniform_Texture, varying_Texture);
    Float fog = min(varying_Depth / uniform_FogEnd, 1.0);
    out_Color.a = color.a * varying_Color.a;
    if (out_Color.a <= 0.01) {
        discard;
    }
    out_Color.rgb = mix(color.rgb * varying_Color.rgb, uniform_FogColor, fog);
}

outputs(0 Vector4 out_Color);